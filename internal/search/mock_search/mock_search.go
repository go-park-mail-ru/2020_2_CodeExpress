// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_CodeExpress/internal/search (interfaces: SearchRep,SearchUsecase)

// Package mock_search is a generated GoMock package.
package mock_search

import (
	models "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/models"
	error_response "github.com/go-park-mail-ru/2020_2_CodeExpress/internal/tools/error_response"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearchRep is a mock of SearchRep interface
type MockSearchRep struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepMockRecorder
}

// MockSearchRepMockRecorder is the mock recorder for MockSearchRep
type MockSearchRepMockRecorder struct {
	mock *MockSearchRep
}

// NewMockSearchRep creates a new mock instance
func NewMockSearchRep(ctrl *gomock.Controller) *MockSearchRep {
	mock := &MockSearchRep{ctrl: ctrl}
	mock.recorder = &MockSearchRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchRep) EXPECT() *MockSearchRepMockRecorder {
	return m.recorder
}

// SelectAlbums mocks base method
func (m *MockSearchRep) SelectAlbums(arg0 string, arg1, arg2 uint64) ([]*models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAlbums", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAlbums indicates an expected call of SelectAlbums
func (mr *MockSearchRepMockRecorder) SelectAlbums(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAlbums", reflect.TypeOf((*MockSearchRep)(nil).SelectAlbums), arg0, arg1, arg2)
}

// SelectArtists mocks base method
func (m *MockSearchRep) SelectArtists(arg0 string, arg1, arg2 uint64) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectArtists", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectArtists indicates an expected call of SelectArtists
func (mr *MockSearchRepMockRecorder) SelectArtists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectArtists", reflect.TypeOf((*MockSearchRep)(nil).SelectArtists), arg0, arg1, arg2)
}

// SelectTracks mocks base method
func (m *MockSearchRep) SelectTracks(arg0 string, arg1, arg2 uint64) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTracks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTracks indicates an expected call of SelectTracks
func (mr *MockSearchRepMockRecorder) SelectTracks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTracks", reflect.TypeOf((*MockSearchRep)(nil).SelectTracks), arg0, arg1, arg2)
}

// MockSearchUsecase is a mock of SearchUsecase interface
type MockSearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUsecaseMockRecorder
}

// MockSearchUsecaseMockRecorder is the mock recorder for MockSearchUsecase
type MockSearchUsecaseMockRecorder struct {
	mock *MockSearchUsecase
}

// NewMockSearchUsecase creates a new mock instance
func NewMockSearchUsecase(ctrl *gomock.Controller) *MockSearchUsecase {
	mock := &MockSearchUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchUsecase) EXPECT() *MockSearchUsecaseMockRecorder {
	return m.recorder
}

// SearchAlbums mocks base method
func (m *MockSearchUsecase) SearchAlbums(arg0 string, arg1, arg2 uint64) ([]*models.Album, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAlbums", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Album)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// SearchAlbums indicates an expected call of SearchAlbums
func (mr *MockSearchUsecaseMockRecorder) SearchAlbums(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAlbums", reflect.TypeOf((*MockSearchUsecase)(nil).SearchAlbums), arg0, arg1, arg2)
}

// SearchArtists mocks base method
func (m *MockSearchUsecase) SearchArtists(arg0 string, arg1, arg2 uint64) ([]*models.Artist, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtists", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// SearchArtists indicates an expected call of SearchArtists
func (mr *MockSearchUsecaseMockRecorder) SearchArtists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtists", reflect.TypeOf((*MockSearchUsecase)(nil).SearchArtists), arg0, arg1, arg2)
}

// SearchTracks mocks base method
func (m *MockSearchUsecase) SearchTracks(arg0 string, arg1, arg2 uint64) ([]*models.Track, *error_response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTracks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(*error_response.ErrorResponse)
	return ret0, ret1
}

// SearchTracks indicates an expected call of SearchTracks
func (mr *MockSearchUsecaseMockRecorder) SearchTracks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTracks", reflect.TypeOf((*MockSearchUsecase)(nil).SearchTracks), arg0, arg1, arg2)
}
